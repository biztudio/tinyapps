<template>

<view>
    <wxc-flex class="wrap" wrap="{{wrap}}">
        <view class="item" wx:for="{{cell_value_list}}" wx:key="idx" wx:for-item="item">
          {{item}}
        </view>
    </wxc-flex>
</view>    

<view class="section">
  <button type="primary" size="default" lang="zh_CN"
        disabled="{{disabled_btnstart}}" bindtap="addnewpractise" hover-class="other-button-hover">{{btnname_start}}</button>

   <button type="warn" size="default"  lang="zh_CN"
        disabled="{{disabled_btncomplete}}" bindtap="completepractise">{{btnname_complete}}</button>      

   <button type="default" size="default"  lang="zh_CN"
            disabled="{{disabled_btnstart}}" bindtap="showcharting">{{btnname_chart}}</button>        

   <button type="default" size="default"  lang="zh_CN"
        disabled="{{disabled_btnstart}}" bindtap="showsetting">{{btnname_setting}}</button>           
</view>

  <wxc-dialog class="wxc-dialog" title="{{btnname_setting}}" content="阅读训练步骤然后选择序列模式" confirm-text="确定" bindconfirm="onConfirmSetting" bindcancel="onCancelSetting">
      <view>
            <wxc-steps steps="{{steps}}" current="{{current}}"></wxc-steps>
      </view>

      <view>
        <text>序列模式：</text>
        <radio-group class="radio-group" bindchange="radioChange">
          <label class="radio"  style="display:flex;" wx:for="{{list_modes}}"  wx:for-item="checkitem"  wx:key="{{checkitem.name}}">
            <radio value="{{checkitem.name}}" checked="{{checkitem.checked}}"/>{{checkitem.value}}
          </label>
        </radio-group>
      </view>
  </wxc-dialog>

<wxc-toast is-show="{{$toast.show}}" text="{{score_message}}" ></wxc-toast>
</template>
<script>
import mathkit from '../lib/mathkit'
import alphabetkit from '../lib/alphabet'

let default_list = []
for(let i = 1; i < 26; i++){
    default_list.push(i);
}
//const app = getApp()

export default {

 config: {
        usingComponents: {
            'wxc-flex':  '@minui/wxc-flex',
            'wxc-toast': '@minui/wxc-toast',
            'wxc-steps': '@minui/wxc-steps',
            'wxc-dialog': '@minui/wxc-dialog'  
        }
    },

 data:{
    userInfo: {},
    hasUserInfo: false,
    case_mode: 2,
    list_modes: [
      {name: '2', value: '数字', checked: 'true'},
      {name: '1', value: '大写字母'},
      {name: '0', value: '小写字母'},
      {name: '3', value: '大小写混合'}
    ],

     steps: [{
        title: '步骤1',
        desc: '点击绿色“开练”按钮进行计时的顺序搜索'
        }, {
        title: '步骤2',
        desc: '搜索完成，立刻点击红色“完成”按钮'
        }],
     current: 1,

     wrap: 'wrap',
   
     $toast: { show: false },
     
     cell_value_list:default_list,
     score_second:0,
     score_message:'',
     btnname_start:'开练',
     btnname_complete:'完成',
     btnname_setting:'设置与说明',
     btnname_chart:'近期成绩',
     disabled_btnstart:false,
     disabled_btncomplete:false,
     max_time_seconds:600,
     timerid:0
 },   

 methods:{

   showcharting:function(e){
      wx.navigateTo({
        url: '/pages/chart/index',
        success:res => {},
        fail:err => {},
        complete:_ => {}
      })
   },
    
    resetstartbutton:function(){
        clearInterval(this.data.timerid) 
        this.setData({score_second:0})
        this.setData({disabled_btnstart:false})
        this.setData({btnname_start:'开练'})
    },

    showtoastinfo:function(message, show_seconds){
        this.setData({score_message:message}) 
        this.setData({ $toast: { show: true } })
        setTimeout(() => { this.setData({ $toast: { show: false }}) }, show_seconds)
    },

    setWrapToWrap: function () {
      this.setData({
        wrap: 'wrap'
      })
    },

    drawgrid:function(){
       let number_grid_case = (this.data.case_mode == 2)
         let mixed_grid_case = (this.data.case_mode == 3)
         let x_axis_length = 5
         let y_axis_length = number_grid_case?5:6;
         let to_upper = (this.data.case_mode == 1);

         let value_list = []
         let digit_pool = []
         if(number_grid_case){
            for(let i = 1; i <= x_axis_length * y_axis_length; i++){ digit_pool.push(i); }
            let temp_pool = digit_pool.slice(0)
            for(let i = 0; i < digit_pool.length; i++){
                            let index = mathkit.get_random_number_index(temp_pool.length);
                            let number = temp_pool[index];
                            value_list.push(number);
                            temp_pool.splice(index, 1);
            }
         }
         else if(mixed_grid_case){
           let referlist = alphabetkit.get_letter_list(to_upper)
           let plainlist = alphabetkit.get_letter_list_random(to_upper)
           for(let letter of plainlist){
              let index = plainlist.indexOf(letter)
              let refindex = referlist.indexOf(letter)

              if(index == refindex ||
                ((letter == 'm' || letter == 'c' || letter == 't') && (index == 0 || index == this.data.case_mode))||
                (index == letter.charCodeAt()%this.data.case_mode)||
                (refindex == letter.charCodeAt()%this.data.case_mode)||
                (refindex > index && index%refindex == this.data.case_mode)||
                (index > refindex && refindex%index == this.data.case_mode)||
                (index - refindex == this.data.case_mode) || (refindex - index == this.data.case_mode)){
                  if(letter != 'i'/*since 'I' looks same as 'l' in case*/){
                      letter = letter.toUpperCase();
                  }
              }
              value_list.push(letter)
           }
           value_list = value_list.concat(['','','',''])
         }
         else{
           value_list = alphabetkit.get_letter_list_random(to_upper).concat(['','','',''])
         }

         this.setData({cell_value_list:value_list})
    },

    addnewpractise:function(event){
         this.drawgrid()
         this.setData({score_second:0})
         this.setData({disabled_btnstart:true})          
         this.setData({timerid:setInterval(()=>{
             let currentsecond = this.data.score_second + 1
             this.setData({score_second:currentsecond})
             this.setData({btnname_start:'训练计时中: ' + currentsecond + ' 秒'})
              
             if(currentsecond > this.data.max_time_seconds){
                  this.resetstartbutton()
                  let message = '用时过长!\n请认真重新再来一次，拜托了.'
                  this.showtoastinfo(message, 3000)
             }
         }, 1000)})
    },

    showsetting:function(event){
      let dialogComponent = this.selectComponent('.wxc-dialog')
      dialogComponent && dialogComponent.show();
    },

    hideDialog:function() {
      let dialogComponent = this.selectComponent('.wxc-dialog')
      dialogComponent && dialogComponent.hide();
      this.drawgrid();
    },

    onConfirmSetting:function(event){
      //console.log('点击了确认按钮')
      this.hideDialog()
    },

    onCancelSetting:function(event){
      //console.log('点击了取消按钮')
      this.hideDialog()
    },

    radioChange: function(e) {
      //console.log('radio发生change事件，携带value值为：', e.detail.value)
      this.setData({case_mode:e.detail.value})
    },

    getUserInfo: function() {

      this.setData({
        userInfo: app.globalData.userInfo,
        hasUserInfo: true
      })
    },

    savepractise:function(){
      let storagekey = 'grid' + this.data.case_mode
      let mode = this.data.case_mode
      let second = this.data.score_second
      let archive = []
     
      try {
        let value = wx.getStorageSync(storagekey)
        if (value) {
            archive = value
            let max_archive_count = 10
            if(archive.length >= max_archive_count){
              archive.shift()
              for(let index in archive){
                //console.log(index)
                archive[index].index = index
              }        
            }
            let pos = archive.length
            archive.push({
                 score_second: second,
                 index: pos
              })
        }
        else{
          archive.push({
              score_second: second,
              index:0
            })
        }
      } catch (e) {
        // Do something when catch error
        console.log(e)
      }
      if(archive){
        wx.setStorage({
          key:storagekey,
          data:archive,
          success:function(e){
            //console.log('new record saved.')
          }
        })
      }
    },

    completepractise:function(event){
       let message = ''
       
       if(this.data.score_second >= 10){
            //this.getUserInfo(event)
            //message = '恭喜'+ this.data.userInfo.nickName +'完成训练! \n本次训练用时 ' + (this.data.score_second) + ' 秒'
            message = '恭喜完成挑战! \n本次训练用时 ' + (this.data.score_second) + ' 秒'
            this.savepractise()
            this.resetstartbutton()
            this.showtoastinfo(message, 2000)
            return
       }
       else if(this.data.score_second > 0 && this.data.score_second < 10){
          let message = '理论上不可能这么快完成!\n请认真重新再来一次，拜托了.'
          this.resetstartbutton()
          this.showtoastinfo(message, 3000)
          return
       }
       this.resetstartbutton()
    }
  }
}
</script>

<style>
  .wrap {
    display: block;
    padding: 10rpx;
    background: #AAAAAA;
  }
  .item {
    min-width: 20%;
    min-height: 100rpx;
    font-size: 60rpx;
    text-align: center;
    font-family: "Helvetica Neue",Helvetica,"PingFang SC","Hiragino Sans GB","Microsoft YaHei","微软雅黑",Arial,sans-serif;
  }
  .item:nth-of-type(odd) {
    line-height: 100rpx;
    background: #C7EDCC
  }
  .item:nth-of-type(2n) {
    line-height: 100rpx;
    background: #FFDDAA
  }

</style>
