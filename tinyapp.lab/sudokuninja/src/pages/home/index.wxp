<template>
  <view>
   
    <view>
      <wxc-flex class="wrap" wrap="{{_wrap}}">
          
          <view data-text="{{grid.init_index}}" data-index="{{idx}}" class="grid" wx:for="{{_grids}}" wx:key="idx"  wx:for-item="grid" >
              
                <view id="panel" class="grid_panel flex-column">
                  <view class="flex-cell flex-row" wx:for="{{grid.grid_rows}}" wx:key="idx_row"  wx:for-item="grid_row">
                    <block  wx:for="{{grid_row}}" wx:key="idx_cell"  wx:for-item="grid_cell" >
                    <text class="flex-cell flex-row" wx:if="{{grid_cell.display > 0}}">{{grid_cell.display}}</text>
                    <text class="flex-cell flex-row" wx:elif="{{grid_cell.display <= 0 && _showAnswer == false}}"></text>
                    <text class="flex-cell flex-row" wx:elif="{{grid_cell.display <= 0 && _showAnswer == true}}">{{grid_cell.value}}</text>
                    </block>
                  </view>  
                </view>  

          </view>

      </wxc-flex>
    </view>

    <view>
      <button type="primary" bindtap="refreshSudoku" size="default">再刷一份</button>
    </view>
    <view>  
      <text class="section__title">选难度: </text>
      <wxc-label class="label">{{_levelDesc}}</wxc-label>      
      <slider value="{{_level}}" bindchange="selectLevel" min="2" max="6" />
    </view>
    <view>
      <text class="section__title">看答案:</text><switch checked="{{_showAnswer}}" type="checkbox" bindchange="switchAnswerChange"/>
    </view>
    
  </view>

</template>

<script>
import sudokukit from '../../common/lib/sudokukit.js'

export default {
  config: {
        usingComponents: {
             'wxc-label': '@minui/wxc-label',
             'wxc-flex':  '@minui/wxc-flex'
                /*
                'wxc-toast': '@minui/wxc-toast',
                'wxc-dialog': '@minui/wxc-dialog'
                */  
            }
  },

  data:{
        _wrap: 'wrap',
        _level:3,
        _levelDesc:'随便玩玩',
        _showAnswer:false,
        _sudokuPuzzle: [],
        _grid_init_indes :[],
        _grids: []
  }, 

  drawSudoku:function(level=3){
    this.setData({_showAnswer:false})
    let sudokuPuzzle = sudokukit.getSudokuPuzzle(level).SudokuPuzzle
    let grid_init_indes = sudokukit.getStartIndesInGrids(sudokuPuzzle)
    let grids = []
    for(let grid_init_index of grid_init_indes){
      let grid_indes = sudokukit.getIndexListInGrid(grid_init_index, grid_init_indes)
      let grid_rows = [[],[],[]]
      let current_line = sudokukit.getLineIndex(grid_init_index)
      for(let grid_index_i in grid_indes){
        let grid_index = grid_indes[grid_index_i]
        let sudoku_cell = sudokuPuzzle[grid_index]
        let line_index = sudokukit.getLineIndex(grid_index)  
        let line_index_in_grid = line_index % 3
        grid_rows[line_index_in_grid].push(sudoku_cell)        
      }
      
      grids.push({init_index:grid_init_index, grid_rows:grid_rows})
    }
    this.setData({_grid_init_indes:grid_init_indes})
    this.setData({_sudokuPuzzle:sudokuPuzzle})
    this.setData({_grids:grids})
  },

  selectLevel:function(event){
    this.setData({_level:event.detail.value})
    switch(event.detail.value){
      case 2: this.setData({_levelDesc:'闭眼秒杀'});break;
      case 3: this.setData({_levelDesc:'随便玩玩'});break;
      case 4: this.setData({_levelDesc:'有点意思'});break;
      case 5: this.setData({_levelDesc:'稍微想想'});break;
      case 6: this.setData({_levelDesc:'琢磨片刻'});break;
    }
    this.drawSudoku(event.detail.value)
  },

  switchAnswerChange:function(event){
    this.setData({_showAnswer:event.detail.value})
  },

  onLoad:function(options) {
    this.drawSudoku(this.data._level)
  },

  refreshSudoku:function(event){
    this.drawSudoku(this.data._level)
  }

}

</script>

<style>
  .label {
    margin-right: 20rpx;
  }
  .wrap {
    display: block;
    padding: 1%;
    background: #003300;
  }
  
  .grid {
    min-width: 32%;
    min-height: 248rpx;
    margin: 0.5%;
    flex-grow: 0;
    font-size: 40rpx;
    text-align: center;
    font-family: "Helvetica Neue",Helvetica,"PingFang SC","Hiragino Sans GB","Microsoft YaHei","微软雅黑",Arial,sans-serif;
  }
  .grid:nth-of-type(odd) {
    line-height: 248rpx;
    background: #C7EDCC/*FFFFFF*/
  }
  .grid:nth-of-type(2n) {
    line-height: 248rpx;
    background: #C7EDCC/*FFDDAA*/
  }

/*flex table */
    .grid_panel{
      /*height:248rpx;*/
      min-height: 248rpx;
    }

    .grid_panel text{
      /*line-height: 40rpx;*/
      border-right: 1rpx solid #003300;
      border-bottom: 1rpx solid #003300;
    }

    .flex-row{
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
      height: 90rpx;
    }
    .flex-column{
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: stretch;
    }

    .flex-cell{
      flex: 1;
    }

</style>
